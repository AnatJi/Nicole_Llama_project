#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path
import logging

class NicoleInstaller:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.bin_dir = self.base_dir / "bin"
        self.scripts_dir = self.base_dir / "scripts"
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(self.base_dir / 'install.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger("NicoleInstaller")
    
    def detect_os(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        system = platform.system().lower()
        arch = platform.machine().lower()
        
        self.logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {system}, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {arch}")
        
        if system == "windows":
            return "windows"
        elif system == "linux":
            return "linux"
        elif system == "darwin":
            return "mac"
        else:
            raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {system}")
    
    def install_python_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        self.logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        requirements_file = self.base_dir / "requirements.txt"
        if not requirements_file.exists():
            self.logger.warning("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", 
                "-r", str(requirements_file)
            ])
            self.logger.info("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            raise
    
    def setup_ollama(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Ollama –ª–æ–∫–∞–ª—å–Ω–æ"""
        os_type = self.detect_os()
        ollama_bin_dir = self.bin_dir / "ollama" / os_type
        
        self.logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama –¥–ª—è {os_type}...")
        
        if not ollama_bin_dir.exists():
            self.logger.error(f"‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {os_type}")
            self.logger.info("–°–∫–∞—á–∞–π—Ç–µ Ollama —Å https://ollama.ai –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ bin/ollama/")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º Ollama –≤ PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        ollama_path = str(ollama_bin_dir)
        if ollama_path not in os.environ['PATH']:
            os.environ['PATH'] = ollama_path + os.pathsep + os.environ['PATH']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ollama
        try:
            result = subprocess.run(
                ["ollama", "--version"], 
                capture_output=True, 
                text=True,
                timeout=10
            )
            if result.returncode == 0:
                self.logger.info("‚úÖ Ollama –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                self.logger.error("‚ùå Ollama –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama: {e}")
            return False
    
    def setup_local_model(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        models_dir = self.bin_dir / "models"
        local_model_dir = models_dir / "llama-3.1-8b"
        
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏...")
        
        if local_model_dir.exists():
            # –ú–æ–¥–µ–ª—å —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
            self.logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            return True
        else:
            self.logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.logger.info("–î–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ bin/models/")
            return False
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directories = [
            self.base_dir / "data",
            self.base_dir / "data" / "long_term_memory",
            self.base_dir / "data" / "emergency_backup",
            self.base_dir / "data" / "conversations",
            self.base_dir / "logs"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    def check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        python_version = sys.version_info
        if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
            self.logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
            return False
        
        self.logger.info(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        try:
            total, used, free = shutil.disk_usage(self.base_dir)
            free_gb = free // (2**30)
            if free_gb < 5:
                self.logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_gb}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5GB+)")
            else:
                self.logger.info(f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {free_gb}GB")
        except:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ")
        
        return True
    
    def install(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nicole...")
        self.logger.info("=" * 50)
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            if not self.check_system_requirements():
                raise Exception("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self.create_directories()
            
            # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self.install_python_dependencies()
            
            # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama
            ollama_ready = self.setup_ollama()
            
            # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
            model_ready = self.setup_local_model()
            
            self.logger.info("=" * 50)
            
            if ollama_ready and model_ready:
                self.logger.info("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                self.logger.info("–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º Ollama –∏ –º–æ–¥–µ–ª—å Llama")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False

def main():
    print("ü§ñ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Nicole - –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    
    installer = NicoleInstaller()
    success = installer.install()
    
    if success:
        print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: python main.py")
    else:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª install.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
