#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import platform
import subprocess
import shutil
import time
from pathlib import Path
import logging

class NicoleInstaller:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.bin_dir = self.base_dir / "bin"
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(self.base_dir / 'install.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger("NicoleInstaller")
    
    def detect_os(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        system = platform.system().lower()
        self.logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {system}")
        
        if system == "windows":
            return "windows"
        elif system == "linux":
            return "linux"
        elif system == "darwin":
            return "mac"
        else:
            raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {system}")
    
    def get_portable_python(self):
        """–ù–∞—Ö–æ–¥–∏—Ç portable Python –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        os_type = self.detect_os()
        portable_python = self.bin_dir / "python" / os_type
        
        if os_type == "windows":
            portable_python = portable_python / "python.exe"
        elif os_type == "linux":
            portable_python = portable_python / "bin" / "python3"
        else:  # mac
            portable_python = portable_python / "bin" / "python3"
        
        if portable_python.exists():
            if os_type != "windows":
                portable_python.chmod(0o755)
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω portable Python: {portable_python}")
            return str(portable_python)
        
        raise Exception(f"Portable Python –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {portable_python}")
    
    def install_python_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ñ—Ñ–ª–∞–π–Ω"""
        self.logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ñ—Ñ–ª–∞–π–Ω...")
        
        python_cmd = self.get_portable_python()
        dependencies_dir = self.base_dir / "dependencies"
        requirements_file = self.base_dir / "requirements-offline.txt"
        
        if not dependencies_dir.exists():
            self.logger.error("‚ùå –ü–∞–ø–∫–∞ dependencies –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise Exception("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        
        if not requirements_file.exists():
            self.logger.error("‚ùå –§–∞–π–ª requirements-offline.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise Exception("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
            result = subprocess.run([
                python_cmd, "-m", "pip", "install",
                "--no-index", "--find-links", str(dependencies_dir),
                "-r", str(requirements_file)
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                self.logger.info(result.stdout)
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                
        except subprocess.TimeoutExpired:
            self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            raise
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            raise
    
    def install_ollama_windows(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –Ω–∞ Windows"""
        ollama_setup = self.bin_dir / "ollama" / "windows" / "OllamaSetup.exe"
        
        if not ollama_setup.exists():
            self.logger.error("‚ùå OllamaSetup.exe –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        self.logger.info("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –¥–ª—è Windows...")
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
            process = subprocess.Popen([str(ollama_setup)], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            time.sleep(30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            if process.poll() is None:
                self.logger.info("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏...")
                time.sleep(30)
            
            self.logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama: {e}")
            return False
    
    def install_ollama_linux(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –Ω–∞ Linux"""
        self.logger.info("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –¥–ª—è Linux...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ollama
            result = subprocess.run([
                "curl", "-fsSL", "https://ollama.com/install.sh"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            install_result = subprocess.run(
                ["sh"], 
                input=result.stdout, 
                text=True,
                timeout=120
            )
            
            if install_result.returncode == 0:
                self.logger.info("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Linux")
                return True
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama –¥–ª—è Linux")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama –¥–ª—è Linux: {e}")
            return False
    
    def install_ollama_mac(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –Ω–∞ macOS"""
        ollama_app = self.bin_dir / "ollama" / "mac" / "Ollama.app"
        
        if not ollama_app.exists():
            self.logger.error("‚ùå Ollama.app –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        self.logger.info("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –¥–ª—è macOS...")
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ Applications
            applications_dir = Path("/Applications")
            if ollama_app.exists():
                shutil.copytree(ollama_app, applications_dir / "Ollama.app", 
                              dirs_exist_ok=True)
                self.logger.info("‚úÖ Ollama —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ Applications")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º Ollama
                subprocess.run(["open", "-a", "Ollama"], check=True)
                self.logger.info("‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω")
                time.sleep(10)
                return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama –¥–ª—è macOS: {e}")
            return False
    
    def install_ollama(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
        if self.check_ollama_installed():
            self.logger.info("‚úÖ Ollama —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        
        os_type = self.detect_os()
        self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –¥–ª—è {os_type}...")
        
        if os_type == "windows":
            return self.install_ollama_windows()
        elif os_type == "linux":
            return self.install_ollama_linux()
        elif os_type == "mac":
            return self.install_ollama_mac()
        else:
            self.logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {os_type}")
            return False
    
    def check_ollama_installed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Ollama"""
        try:
            result = subprocess.run(
                ["ollama", "--version"], 
                capture_output=True, 
                text=True,
                timeout=10
            )
            if result.returncode == 0:
                self.logger.info(f"‚úÖ Ollama –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {result.stdout.strip()}")
                return True
        except:
            pass
        return False
    
    def setup_local_model(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        local_model_dir = self.bin_dir / "models" / "llama-3.1-8b"
        model_files = list(local_model_dir.glob("*.gguf"))
        
        if not model_files:
            self.logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            return self.setup_online_model()
        
        model_file = model_files[0]
        self.logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {model_file.name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º Modelfile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            modelfile_content = f"""FROM {model_file}

SYSTEM \"\"\"{{{{ .System }}}}\"\"\"

PARAMETER temperature 0.7
PARAMETER top_p 0.9
PARAMETER num_ctx 32000
"""
            modelfile_path = self.base_dir / "Nicole-Kyara-Local.Modelfile"
            with open(modelfile_path, 'w', encoding='utf-8') as f:
                f.write(modelfile_content)
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –≤ Ollama
            self.logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            result = subprocess.run([
                "ollama", "create", "nicole-kyara", 
                "-f", str(modelfile_path)
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å nicole-kyara —Å–æ–∑–¥–∞–Ω–∞")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def setup_online_model(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –æ–Ω–ª–∞–π–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
        self.logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        modelfile_path = self.base_dir / "Nicole-Kyara.Modelfile"
        if not modelfile_path.exists():
            self.logger.error("‚ùå Nicole-Kyara.Modelfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            result = subprocess.run([
                "ollama", "create", "nicole-kyara", 
                "-f", str(modelfile_path)
            ], capture_output=True, text=True, timeout=600)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ –ú–æ–¥–µ–ª—å nicole-kyara —Å–æ–∑–¥–∞–Ω–∞")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directories = [
            self.base_dir / "data",
            self.base_dir / "data" / "long_term_memory",
            self.base_dir / "data" / "emergency_backup",
            self.base_dir / "data" / "conversations",
            self.base_dir / "logs"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    def check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        try:
            total, used, free = shutil.disk_usage(self.base_dir)
            free_gb = free // (2**30)
            if free_gb < 10:
                self.logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_gb}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 10GB+)")
            else:
                self.logger.info(f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {free_gb}GB")
        except:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ")
        
        return True
    
    def wait_for_ollama_service(self, max_wait=60):
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã Ollama"""
        self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã Ollama...")
        
        for i in range(max_wait):
            try:
                result = subprocess.run(
                    ["ollama", "list"], 
                    capture_output=True, 
                    text=True,
                    timeout=5
                )
                if result.returncode == 0:
                    self.logger.info("‚úÖ –°–ª—É–∂–±–∞ Ollama –∑–∞–ø—É—â–µ–Ω–∞")
                    return True
            except:
                pass
            
            time.sleep(1)
            if (i + 1) % 10 == 0:
                self.logger.info(f"   ...–æ–∂–∏–¥–∞–Ω–∏–µ ({i+1}/{max_wait} —Å–µ–∫—É–Ω–¥)")
        
        self.logger.error("‚ùå –°–ª—É–∂–±–∞ Ollama –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
        return False
    
    def install(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nicole...")
        self.logger.info("=" * 50)
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            if not self.check_system_requirements():
                raise Exception("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self.create_directories()
            
            # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self.install_python_dependencies()
            
            # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama
            ollama_installed = self.install_ollama()
            if not ollama_installed:
                self.logger.warning("‚ö†Ô∏è Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                self.logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é —Å https://ollama.com")
                return False
            
            # 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã Ollama
            if not self.wait_for_ollama_service():
                self.logger.warning("‚ö†Ô∏è –°–ª—É–∂–±–∞ Ollama –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                self.logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É")
                return False
            
            # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
            model_ready = self.setup_local_model()
            if not model_ready:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å")
                return False
            
            self.logger.info("=" * 50)
            self.logger.info("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False

def main():
    print("ü§ñ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Nicole - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    print("–≠—Ç–æ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫:")
    print("  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ñ—Ñ–ª–∞–π–Ω")
    print("  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç Ollama")
    print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å")
    print("  ‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    print("=" * 50)
    
    installer = NicoleInstaller()
    success = installer.install()
    
    if success:
        print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:")
        print("  Windows: run.bat")
        print("  Linux/Mac: ./run.sh")
    else:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª install.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
