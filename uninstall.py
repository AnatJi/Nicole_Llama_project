#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import shutil
import platform
import subprocess
import logging
from pathlib import Path

class NicoleUninstaller:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(self.base_dir / 'uninstall.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger("NicoleUninstaller")
    
    def remove_ollama_model(self):
        """–£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å nicole-kyara –∏–∑ Ollama"""
        self.logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ nicole-kyara –∏–∑ Ollama...")
        try:
            result = subprocess.run(["ollama", "rm", "nicole-kyara"], 
                         capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                self.logger.info("‚úÖ –ú–æ–¥–µ–ª—å nicole-kyara —É–¥–∞–ª–µ–Ω–∞")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å: {result.stderr}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
    
    def remove_project_files(self):
        """–£–¥–∞–ª—è–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ uninstall.py"""
        self.logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º uninstall.py –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        current_file = Path(__file__)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        for item in self.base_dir.iterdir():
            if item != current_file and item.name != 'uninstall.log':
                try:
                    if item.is_file():
                        item.unlink()
                        self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item.name}")
                    elif item.is_dir():
                        shutil.rmtree(item)
                        self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {item.name}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item}: {e}")
    
    def clean_portable_python(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ portable Python"""
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ portable Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        python_dirs = [
            self.base_dir / "bin" / "python" / "windows",
            self.base_dir / "bin" / "python" / "linux", 
            self.base_dir / "bin" / "python" / "mac"
        ]
        
        for python_dir in python_dirs:
            if python_dir.exists():
                # –î–ª—è Windows
                if python_dir.name == "windows":
                    lib_dir = python_dir / "Lib" / "site-packages"
                    if lib_dir.exists():
                        try:
                            shutil.rmtree(lib_dir)
                            self.logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {lib_dir}")
                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {lib_dir}: {e}")
                
                # –î–ª—è Linux/Mac
                else:
                    lib_dir = python_dir / "lib" / "python3.11" / "site-packages"
                    if lib_dir.exists():
                        try:
                            shutil.rmtree(lib_dir)
                            self.logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {lib_dir}")
                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {lib_dir}: {e}")
    
    def remove_system_dependencies(self):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Ollama
        try:
            subprocess.run(["ollama", "--version"], 
                         capture_output=True, check=True)
            response = input("–£–¥–∞–ª–∏—Ç—å Ollama —Å —Å–∏—Å—Ç–µ–º—ã? (y/N): ")
            if response.lower() == 'y':
                self.remove_ollama_system()
        except:
            self.logger.info("‚úÖ Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    def remove_ollama_system(self):
        """–£–¥–∞–ª—è–µ—Ç Ollama —Å —Å–∏—Å—Ç–µ–º—ã"""
        system = platform.system().lower()
        self.logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ Ollama –¥–ª—è {system}...")
        
        try:
            if system == "windows":
                # –ß–µ—Ä–µ–∑ winget –∏–ª–∏ —Ä—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                subprocess.run([
                    "winget", "uninstall", "Ollama.Ollama"
                ], timeout=60, capture_output=True)
                self.logger.info("‚úÖ Ollama —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ winget")
                
            elif system == "linux":
                # –î–ª—è Linux (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
                subprocess.run(["sudo", "rm", "-f", "/usr/local/bin/ollama"], 
                             timeout=30)
                self.logger.info("‚úÖ Ollama —É–¥–∞–ª–µ–Ω –¥–ª—è Linux")
                
            elif system == "darwin":
                # –î–ª—è macOS
                subprocess.run([
                    "sudo", "rm", "-rf", 
                    "/Applications/Ollama.app",
                    "/usr/local/bin/ollama"
                ], timeout=30)
                self.logger.info("‚úÖ Ollama —É–¥–∞–ª–µ–Ω –¥–ª—è macOS")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Ollama: {e}")
            print("–£–¥–∞–ª–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é —Å –ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    def show_final_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        print("\n" + "="*50)
        print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("="*50)
        print("–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã:")
        print("  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞")
        print("  ‚úÖ –ú–æ–¥–µ–ª—å nicole-kyara –∏–∑ Ollama") 
        print("  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ portable Python")
        print("  ‚úÖ –õ–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:")
        print(f"  –£–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞: {self.base_dir}")
        print("\n–ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏–ª–∏ Ollama:")
        print("  –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def uninstall(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è Nicole...")
        self.logger.info("=" * 50)
        
        try:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞!")
            print("–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
            print("  ‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
            print("  ‚Ä¢ –ú–æ–¥–µ–ª—å nicole-kyara –∏–∑ Ollama")
            print("  ‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏")
            print("  ‚Ä¢ (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) Ollama —Å —Å–∏—Å—Ç–µ–º—ã")
            print("\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
            
            confirm = input("\n–í–≤–µ–¥–∏—Ç–µ 'DELETE ALL' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            
            if confirm != 'DELETE ALL':
                print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            
            # 1. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ Ollama
            self.remove_ollama_model()
            
            # 2. –û—á–∏—Å—Ç–∫–∞ portable Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self.clean_portable_python()
            
            # 3. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            self.remove_project_files()
            
            # 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.remove_system_dependencies()
            
            # 5. –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            self.show_final_instructions()
            
            self.logger.info("üéâ –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def main():
    print("üóëÔ∏è  Nicole - –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ")
    print("=" * 50)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –ø—Ä–æ–µ–∫—Ç Nicole")
    print("–∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ.")
    print("=" * 50)
    
    uninstaller = NicoleUninstaller()
    uninstaller.uninstall()

if __name__ == "__main__":
    import sys
    main()
