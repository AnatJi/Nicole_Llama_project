#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import shutil
import platform
import subprocess
import logging
from pathlib import Path

class NicoleUninstaller:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(self.base_dir / 'uninstall.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger("NicoleUninstaller")
    
    def remove_ollama_model(self):
        """–£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å nicole-kyara –∏–∑ Ollama"""
        self.logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ nicole-kyara –∏–∑ Ollama...")
        try:
            subprocess.run(["ollama", "rm", "nicole-kyara"], 
                         capture_output=True, timeout=30)
            self.logger.info("‚úÖ –ú–æ–¥–µ–ª—å nicole-kyara —É–¥–∞–ª–µ–Ω–∞")
        except:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å nicole-kyara")
    
    def remove_project_data(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        directories_to_remove = [
            self.base_dir / "data",
            self.base_dir / "logs",
            self.base_dir / "__pycache__",
            self.base_dir / "scripts" / "__pycache__"
        ]
        
        files_to_remove = [
            self.base_dir / "install.log",
            self.base_dir / "uninstall.log",
            self.base_dir / "nicole_system.log"
        ]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for directory in directories_to_remove:
            if directory.exists():
                try:
                    shutil.rmtree(directory)
                    self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {directory}: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        for file_path in files_to_remove:
            if file_path.exists():
                try:
                    file_path.unlink()
                    self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
    
    def clean_system_dependencies(self):
        """–û—á–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–∞–ª–∏—Ç—å Ollama (—Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é)
        response = input("–£–¥–∞–ª–∏—Ç—å Ollama —Å —Å–∏—Å—Ç–µ–º—ã? (y/N): ")
        if response.lower() == 'y':
            self.remove_ollama_system()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–∞–ª–∏—Ç—å Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        response = input("–£–¥–∞–ª–∏—Ç—å Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞? (y/N): ")
        if response.lower() == 'y':
            self.remove_python_dependencies()
    
    def remove_ollama_system(self):
        """–£–¥–∞–ª—è–µ—Ç Ollama —Å —Å–∏—Å—Ç–µ–º—ã"""
        system = platform.system().lower()
        self.logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ Ollama –¥–ª—è {system}...")
        
        try:
            if system == "windows":
                # –ß–µ—Ä–µ–∑ PowerShell
                subprocess.run([
                    "powershell", "-Command", 
                    "Get-WmiObject -Class Win32_Product | Where-Object {$_.Name -like '*Ollama*'} | ForEach-Object {$_.Uninstall()}"
                ], timeout=60)
            elif system == "linux":
                # –î–ª—è Linux (Ubuntu-based)
                subprocess.run(["sudo", "apt", "remove", "--purge", "-y", "ollama"], 
                             timeout=60)
            elif system == "darwin":
                # –î–ª—è macOS
                subprocess.run([
                    "sudo", "rm", "-rf", 
                    "/Applications/Ollama.app",
                    "/usr/local/bin/ollama"
                ], timeout=60)
            
            self.logger.info("‚úÖ Ollama —É–¥–∞–ª–µ–Ω —Å —Å–∏—Å—Ç–µ–º—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Ollama: {e}")
    
    def remove_python_dependencies(self):
        """–£–¥–∞–ª—è–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.logger.info("–£–¥–∞–ª–µ–Ω–∏–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        requirements_file = self.base_dir / "requirements.txt"
        if not requirements_file.exists():
            self.logger.warning("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            with open(requirements_file, 'r') as f:
                dependencies = [line.strip().split('>=')[0] for line in f 
                              if line.strip() and not line.startswith('#')]
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            for dep in dependencies:
                subprocess.run([
                    sys.executable, "-m", "pip", "uninstall", "-y", dep
                ], capture_output=True)
            
            self.logger.info("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    
    def show_remaining_files(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:")
        
        exclude_dirs = {'bin', '.git'}  # –ò—Å–∫–ª—é—á–∞–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –∏ git
        
        for item in self.base_dir.rglob('*'):
            if item.is_file() and not any(part in exclude_dirs for part in item.parts):
                print(f"  - {item.relative_to(self.base_dir)}")
        
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é:")
        print(f"  {self.base_dir}")
    
    def uninstall(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è Nicole...")
        self.logger.info("=" * 50)
        
        try:
            print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/NO): ")
            
            if confirm.lower() != 'yes':
                print("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            
            # 1. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ Ollama
            self.remove_ollama_model()
            
            # 2. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
            self.remove_project_data()
            
            # 3. –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.clean_system_dependencies()
            
            # 4. –ü–æ–∫–∞–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
            self.show_remaining_files()
            
            self.logger.info("=" * 50)
            self.logger.info("üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
            print("\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print("–†—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: —É–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏.")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def main():
    print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ Nicole - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
    print("=" * 50)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç:")
    print("  ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    print("  ‚Ä¢ –õ–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("  ‚Ä¢ –ú–æ–¥–µ–ª—å nicole-kyara –∏–∑ Ollama")
    print("  ‚Ä¢ (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print("=" * 50)
    
    uninstaller = NicoleUninstaller()
    uninstaller.uninstall()

if __name__ == "__main__":
    import sys
    main()
