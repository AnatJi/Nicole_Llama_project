#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import subprocess
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    base_dir = Path(__file__).parent
    scripts_dir = base_dir / "scripts"
    
    # –î–æ–±–∞–≤–ª—è–µ–º scripts –≤ –ø—É—Ç—å
    sys.path.insert(0, str(scripts_dir))
    
    try:
        import requests
        import yaml
        return True
    except ImportError as e:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫: python install.py")
        return False

def check_ollama():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama"""
    try:
        result = subprocess.run(
            ["ollama", "list"], 
            capture_output=True, 
            text=True,
            timeout=30
        )
        return result.returncode == 0
    except:
        return False

def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    base_dir = Path(__file__).parent
    bin_dir = base_dir / "bin"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –≤ PATH
    if bin_dir.exists():
        ollama_dirs = [
            bin_dir / "ollama" / "windows",
            bin_dir / "ollama" / "linux", 
            bin_dir / "ollama" / "mac"
        ]
        
        for ollama_dir in ollama_dirs:
            if ollama_dir.exists():
                os.environ['PATH'] = str(ollama_dir) + os.pathsep + os.environ['PATH']
                break

def main():
    print("ü§ñ Nicole - –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
    if not check_ollama():
        print("‚ùå Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫: python install.py")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
    try:
        result = subprocess.run(
            ["ollama", "list"], 
            capture_output=True, 
            text=True,
            timeout=30
        )
        if "nicole-kyara" not in result.stdout:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å nicole-kyara –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("–°–æ–∑–¥–∞—é –º–æ–¥–µ–ª—å...")
            
            modelfile = Path("Nicole-Kyara.Modelfile")
            if modelfile.exists():
                subprocess.run([
                    "ollama", "create", "nicole-kyara", 
                    "-f", str(modelfile)
                ], check=True)
                print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print("‚ùå –§–∞–π–ª Nicole-Kyara.Modelfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
                sys.exit(1)
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    try:
        from scripts.kyara_manager import KyaraCharacterManager
        
        print("üîí –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ê–ö–¢–ò–í–ù–´")
        print("üíæ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: –ê–ö–¢–ò–í–ù–ê") 
        print("üö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –ê–ö–¢–ò–í–ù–û")
        print("üëë –ì–æ—Å–ø–æ–∂–∞: –ö—å—è—Ä–∞")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  '—Å—Ç–∞—Ç–∞' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞")
        print("  '–ø–∞–º—è—Ç—å' - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é") 
        print("  '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        print("-" * 50)
        
        manager = KyaraCharacterManager()
        
        while True:
            try:
                user_input = input("‚û§ ").strip()
                
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                    manager.save_long_term_memory()
                    break
                    
                elif user_input.lower() == '—Å—Ç–∞—Ç–∞':
                    stats = manager.get_conversation_stats()
                    print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
                    print(f"üß† –ü–∞–º—è—Ç—å: {stats['long_term_memory_entries']} –∑–∞–ø–∏—Å–µ–π")
                    print(f"‚≠ê –í–∞–∂–Ω—ã—Ö: {stats['important_memories']}")
                    continue
                
                elif user_input.lower() == '–ø–∞–º—è—Ç—å':
                    print(manager.get_memory_summary())
                    continue
                
                response = manager.chat(user_input)
                print(f"–ù–∏–∫–æ–ª—å: {response}\n")
                
            except KeyboardInterrupt:
                print("\nüö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                manager.save_long_term_memory()
                break
            except Exception as e:
                print(f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
