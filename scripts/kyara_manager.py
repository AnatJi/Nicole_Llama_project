#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import requests
import json
import os
import random
from config_loader import ConfigLoader
from security_system import SecuritySystem
from context_optimizer import ContextOptimizer
from emergency_save import EmergencySave

class KyaraCharacterManager:
    def __init__(self, config_path="config", data_path="data"):
        self.config_loader = ConfigLoader(config_path)
        self.settings = self.config_loader.load_settings()
        self.security_system = SecuritySystem(config_path)
        self.context_optimizer = ContextOptimizer(data_path)
        self.emergency_save = EmergencySave(data_path)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.emergency_save.setup_emergency_handlers()
        
        self.model = self.settings['model']['name']
        self.base_url = "http://localhost:11434/api"
        self.conversation_history = []
        self.long_term_memory = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = self.config_loader.build_system_prompt()
        self.add_system_message(system_prompt)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        self.load_long_term_memory()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.message_count = 0
        
    def add_system_message(self, message):
        self.conversation_history.append({"role": "system", "content": message})
    
    def detect_complex_task(self, user_message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        task_indicators = ['–∑–∞–¥–∞—á–∞', '—Ä–µ—à–∏', '–ª–æ–≥–∏—á–µ—Å–∫', '–≥–æ–ª–æ–≤–æ–ª–æ–º–∫', '–ø–æ—Å—á–∏—Ç–∞–π']
        return any(indicator in user_message.lower() for indicator in task_indicators)
    
    def optimize_context(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        if len(self.conversation_history) > 20:
            self.conversation_history = self.context_optimizer.compress_conversation(
                self.conversation_history
            )
    
    def save_to_long_term_memory(self, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"""
        if self.context_optimizer.should_save_to_long_term(message, self.conversation_history):
            memory_entry = {
                'timestamp': self._get_timestamp(),
                'content': message['content'],
                'role': message['role'],
                'importance': self.context_optimizer.calculate_importance(message)
            }
            self.long_term_memory.append(memory_entry)
    
    def load_long_term_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"""
        memory_file = os.path.join("data", "long_term_memory", "memory.json")
        if os.path.exists(memory_file):
            try:
                with open(memory_file, 'r', encoding='utf-8') as f:
                    self.long_term_memory = json.load(f)
            except:
                self.long_term_memory = []
    
    def save_long_term_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª"""
        memory_dir = os.path.join("data", "long_term_memory")
        os.makedirs(memory_dir, exist_ok=True)
        memory_file = os.path.join(memory_dir, "memory.json")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
        if len(self.long_term_memory) > 1000:
            self.long_term_memory = self.long_term_memory[-1000:]
        
        with open(memory_file, 'w', encoding='utf-8') as f:
            json.dump(self.long_term_memory, f, ensure_ascii=False, indent=2)
    
    def _get_timestamp(self):
        from datetime import datetime
        return datetime.now().isoformat()
    
    def chat(self, user_message):
        # –ê–í–ê–†–ò–ô–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_count += 1
        if self.message_count % 50 == 0:
            self.emergency_save.save_emergency_state({
                'conversation_history': self.conversation_history[-20:],
                'long_term_memory': self.long_term_memory[-100:]
            })
        
        # –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        is_injection, security_response = self.security_system.detect_injection_attempt(user_message)
        if is_injection:
            self.conversation_history.append({"role": "user", "content": user_message})
            self.conversation_history.append({"role": "assistant", "content": security_response})
            return security_response
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê
        self.optimize_context()
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
        self.conversation_history.append({"role": "user", "content": user_message})
        
        # –°–û–•–†–ê–ù–ï–ù–ò–ï –í –î–û–õ–ì–û–í–†–ï–ú–ï–ù–ù–£–Æ –ü–ê–ú–Ø–¢–¨
        self.save_to_long_term_memory({"role": "user", "content": user_message})
        
        # –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø API
        recent_messages = self.conversation_history[-self.settings['memory']['short_term_messages']:]
        
        data = {
            "model": self.model,
            "messages": recent_messages,
            "stream": False,
            "options": {
                "num_predict": self.settings['model']['max_tokens'],
                "temperature": self.settings['model']['temperature'],
                "top_p": self.settings['model']['top_p'],
                "repeat_penalty": self.settings['model']['repeat_penalty']
            }
        }
        
        try:
            response = requests.post(self.base_url + "/chat", json=data, timeout=120)
            
            if response.status_code == 200:
                result = response.json()
                assistant_message = result['message']['content']
                
                # –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –û–¢–í–ï–¢ –ü–û–õ–ù–´–ô
                if not assistant_message.endswith(('.', '!', '?')) and len(assistant_message) > 50:
                    assistant_message += "."
                
                self.conversation_history.append({
                    "role": "assistant", 
                    "content": assistant_message
                })
                
                # –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –í –ü–ê–ú–Ø–¢–¨
                self.save_to_long_term_memory({"role": "assistant", "content": assistant_message})
                self.save_long_term_memory()
                
                return assistant_message
            else:
                return "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–≤—è–∑–∏."
                
        except Exception as e:
            return "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏. –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."
    
    def get_conversation_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞"""
        return {
            'total_messages': len(self.conversation_history),
            'long_term_memory_entries': len(self.long_term_memory),
            'memory_usage': f"{len(self.conversation_history)}/30 —Å–æ–æ–±—â–µ–Ω–∏–π"
        }

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    manager = KyaraCharacterManager()
    
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –ù–∏–∫–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print("üîí –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ê–ö–¢–ò–í–ù–´")
    print("üíæ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: –ê–ö–¢–ò–í–ù–ê")
    print("üö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –ê–ö–¢–ò–í–ù–û")
    
    while True:
        try:
            user_input = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit']:
                break
                
            response = manager.chat(user_input)
            print(f"–ù–∏–∫–æ–ª—å: {response}")
            
        except KeyboardInterrupt:
            print("\nüíæ –í—ã–ø–æ–ª–Ω—è—é –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
            break
