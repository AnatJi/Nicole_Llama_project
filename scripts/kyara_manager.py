#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import requests
import json
import os
import random
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from config_loader import ConfigLoader
    from security_system import SecuritySystem
    from context_optimizer import ContextOptimizer
    from emergency_save import EmergencySave
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
    import sys
    scripts_dir = Path(__file__).parent
    sys.path.append(str(scripts_dir))
    from config_loader import ConfigLoader
    from security_system import SecuritySystem
    from context_optimizer import ContextOptimizer
    from emergency_save import EmergencySave

class KyaraCharacterManager:
    def __init__(self, config_path="config", data_path="data"):
        # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        self.base_dir = Path(__file__).parent.parent
        self.config_path = self.base_dir / config_path
        self.data_path = self.base_dir / data_path
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._create_directories()
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
        self.config_loader = ConfigLoader(str(self.config_path))
        self.settings = self.config_loader.load_settings()
        self.security_system = SecuritySystem(str(self.config_path))
        self.context_optimizer = ContextOptimizer(str(self.data_path))
        self.emergency_save = EmergencySave(str(self.data_path))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.emergency_save.setup_emergency_handlers()
        
        self.model = self.settings.get('model', {}).get('name', 'nicole-kyara')
        self.base_url = "http://localhost:11434/api"
        self.conversation_history = []
        self.long_term_memory = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = self.config_loader.build_system_prompt()
        self.add_system_message(system_prompt)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.load_long_term_memory()
        self.inject_memory_into_context()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.message_count = 0
        
        self.logger.info("üß† –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: –ó–ê–ì–†–£–ñ–ï–ù–ê")
        if self.long_term_memory:
            self.logger.info(f"   üìö –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.long_term_memory)}")
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(self.data_path / 'nicole_system.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger("NicoleManager")
    
    def _create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            self.data_path.mkdir(exist_ok=True)
            (self.data_path / "long_term_memory").mkdir(exist_ok=True)
            (self.data_path / "emergency_backup").mkdir(exist_ok=True)
            (self.data_path / "conversations").mkdir(exist_ok=True)
            self.logger.info("üìÅ –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
            raise
    
    def add_system_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.conversation_history.append({"role": "system", "content": message})
    
    def load_long_term_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"""
        memory_dir = self.data_path / "long_term_memory"
        memory_file = memory_dir / "memory.json"
        
        if memory_file.exists():
            try:
                with open(memory_file, 'r', encoding='utf-8') as f:
                    self.long_term_memory = json.load(f)
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.long_term_memory)}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
                self.long_term_memory = []
        else:
            self.long_term_memory = []
            self.logger.info("üìù –§–∞–π–ª –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    
    def inject_memory_into_context(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        if not self.long_term_memory:
            return
        
        memory_context = self.build_memory_context()
        if memory_context:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–∞–º—è—Ç—å—é
            if self.conversation_history and self.conversation_history[0]['role'] == 'system':
                self.conversation_history[0]['content'] += f"\n\n–í–ê–ñ–ù–´–ï –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò–ó –ü–†–û–®–õ–´–• –ë–ï–°–ï–î:\n{memory_context}"
                self.logger.info("üîó –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    
    def build_memory_context(self):
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        if not self.long_term_memory:
            return ""
        
        context = ""
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        important_memories = sorted(
            [m for m in self.long_term_memory if m.get('importance', 0) >= 2],
            key=lambda x: x.get('timestamp', ''),
            reverse=True
        )[:15]
        
        for memory in important_memories:
            timestamp = memory.get('timestamp', '')[:16]  # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            content = memory['content']
            context += f"- {content} ({timestamp})\n"
        
        return context
    
    def enhance_memory_detection(self, message):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ—Ä–∞–∑"""
        content = message['content'].lower()
        role = message['role']
        
        # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        memory_requests = [
            '–∑–∞–ø–æ–º–Ω–∏', '–∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ', '–Ω–µ –∑–∞–±—É–¥—å', '–Ω–∞–ø–æ–º–Ω–∏', '—Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–º—è—Ç—å',
            '–∑–∞–ø–∏—à–∏', '—É—á—Ç–∏', '–∏–º–µ–π –≤ –≤–∏–¥—É', '–¥–µ—Ä–∂–∏ –≤ –ø–∞–º—è—Ç–∏'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
        important_objects = [
            '—Å–∫–ª–∞–¥', '—à–ª—è–ø–∞', '—Ñ–∏–æ–ª–µ—Ç–æ–≤', '–ø–æ—Ä—É—á–µ–Ω', '–∑–∞–¥–∞–Ω–∏–µ', '–ø—Ä–æ—Å—å–±',
            '–¥–æ–∫—É–º–µ–Ω—Ç', '–∫–ª—é—á', '–æ—Ä—É–∂–∏–µ', '–∫–æ—Ñ–µ', '—á–∞–π', '–ø–æ–¥–∞—Ä–æ–∫'
        ]
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—à–ª–æ–º
        past_references = [
            '–≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑', '—Ä–∞–Ω–µ–µ', '—Ä–∞–Ω—å—à–µ', '–ø–æ–º–Ω–∏—à—å', '–≤—Å–ø–æ–º–Ω–∏',
            '–Ω–∞ –ø—Ä–æ—à–ª–æ–º —Å—Ç—Ä–∏–º–µ', '–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥–µ', '–º—ã –≥–æ–≤–æ—Ä–∏–ª–∏'
        ]
        
        # –û–ß–ï–ù–¨ –í–ê–ñ–ù–û: —è–≤–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã –∑–∞–ø–æ–º–Ω–∏—Ç—å
        if any(phrase in content for phrase in memory_requests):
            return 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        
        # –í–ê–ñ–ù–û: —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if any(obj in content for obj in important_objects):
            return 4
        
        # –°–†–ï–î–ù–Ø–Ø –í–ê–ñ–ù–û–°–¢–¨: –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—à–ª–æ–º
        if any(ref in content for ref in past_references):
            return 3
            
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –∏–∑ context_optimizer
        return self.context_optimizer.calculate_importance(message)
    
    def manual_memory_save(self, content, importance=4):
        """–†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        memory_entry = {
            'timestamp': self._get_timestamp(),
            'content': content,
            'role': 'memory',
            'importance': importance,
            'type': 'user_request'
        }
        self.long_term_memory.append(memory_entry)
        self.save_long_term_memory()
        self.logger.info(f"üíæ –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å: '{content[:50]}...'")
        return f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å: '{content}'"
    
    def save_long_term_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª"""
        memory_dir = self.data_path / "long_term_memory"
        memory_file = memory_dir / "memory.json"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –∑–∞–ø–∏—Å–µ–π)
        if len(self.long_term_memory) > 200:
            self.long_term_memory = self.long_term_memory[-200:]
            self.logger.info("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ 200 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π)")
        
        try:
            with open(memory_file, 'w', encoding='utf-8') as f:
                json.dump(self.long_term_memory, f, ensure_ascii=False, indent=2)
            self.logger.debug("üíæ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –¥–∏—Å–∫")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
    
    def detect_memory_commands(self, user_message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–∞–º—è—Ç–∏"""
        message_lower = user_message.lower()
        
        # –ö–æ–º–∞–Ω–¥–∞ —è–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
        if any(cmd in message_lower for cmd in ['–∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ', '—Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–º—è—Ç—å', '–Ω–µ –∑–∞–±—É–¥—å —á—Ç–æ']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            content_to_save = user_message
            for prefix in ['–∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ', '—Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–º—è—Ç—å', '–Ω–µ –∑–∞–±—É–¥—å —á—Ç–æ']:
                if prefix in message_lower:
                    content_to_save = user_message[user_message.lower().find(prefix) + len(prefix):].strip()
                    break
            
            if content_to_save and len(content_to_save) > 5:
                response = self.manual_memory_save(content_to_save, importance=5)
                return True, response
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç—å
        if '–ø–æ–∫–∞–∂–∏ –ø–∞–º—è—Ç—å' in message_lower or '—á—Ç–æ –ø–æ–º–Ω–∏—à—å' in message_lower:
            memory_summary = self.get_memory_summary()
            return True, f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏:\n{memory_summary}"
        
        # –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
        if '–æ—á–∏—Å—Ç–∏ –ø–∞–º—è—Ç—å' in message_lower or '—É–¥–∞–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è' in message_lower:
            self.long_term_memory = []
            self.save_long_term_memory()
            self.logger.warning("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return True, "‚úÖ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞."
        
        return False, None
    
    def get_memory_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–∞–º—è—Ç–∏"""
        if not self.long_term_memory:
            return "–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞."
        
        total = len(self.long_term_memory)
        important = len([m for m in self.long_term_memory if m.get('importance', 0) >= 3])
        recent = len([m for m in self.long_term_memory[-10:]])
        
        summary = f"–í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total}\n"
        summary += f"–í–∞–∂–Ω—ã—Ö: {important}\n"
        summary += f"–ù–µ–¥–∞–≤–Ω–∏—Ö: {recent}\n\n"
        summary += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n"
        
        for memory in self.long_term_memory[-5:]:
            content = memory['content'][:50] + "..." if len(memory['content']) > 50 else memory['content']
            importance = memory.get('importance', 0)
            summary += f"- {content} (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance}/5)\n"
        
        return summary
    
    def optimize_context(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        if len(self.conversation_history) > 25:
            original_count = len(self.conversation_history)
            self.conversation_history = self.context_optimizer.compress_conversation(
                self.conversation_history
            )
            self.logger.info(f"üîß –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {original_count} ‚Üí {len(self.conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def save_to_long_term_memory(self, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"""
        importance = self.enhance_memory_detection(message)
        
        if importance >= 2:  # –ü–æ—Ä–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            memory_entry = {
                'timestamp': self._get_timestamp(),
                'content': message['content'],
                'role': message['role'],
                'importance': importance,
                'type': 'auto_save'
            }
            self.long_term_memory.append(memory_entry)
            self.logger.debug(f"üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance}): {message['content'][:30]}...")
            
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–µ 5 –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if importance >= 3 and len(self.long_term_memory) % 5 == 0:
                self.save_long_term_memory()
    
    def _get_timestamp(self):
        return datetime.now().isoformat()
    
    def chat(self, user_message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ê–í–ê–†–ò–ô–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_count += 1
        if self.message_count % 50 == 0:
            self.emergency_save.save_emergency_state({
                'conversation_history': self.conversation_history[-20:],
                'long_term_memory': self.long_term_memory[-100:],
                'message_count': self.message_count
            })
            self.logger.info("üö® –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–ª–∞–Ω–æ–≤–æ–µ –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        
        # –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î –ü–ê–ú–Ø–¢–ò
        is_memory_command, memory_response = self.detect_memory_commands(user_message)
        if is_memory_command:
            self.conversation_history.append({"role": "user", "content": user_message})
            self.conversation_history.append({"role": "assistant", "content": memory_response})
            return memory_response
        
        # –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        is_injection, security_response = self.security_system.detect_injection_attempt(user_message)
        if is_injection:
            self.conversation_history.append({"role": "user", "content": user_message})
            self.conversation_history.append({"role": "assistant", "content": security_response})
            self.logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏: {user_message}")
            return security_response
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê
        self.optimize_context()
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
        self.conversation_history.append({"role": "user", "content": user_message})
        
        # –°–û–•–†–ê–ù–ï–ù–ò–ï –í –î–û–õ–ì–û–í–†–ï–ú–ï–ù–ù–£–Æ –ü–ê–ú–Ø–¢–¨
        self.save_to_long_term_memory({"role": "user", "content": user_message})
        
        # –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø API
        recent_messages = self.conversation_history[-self.settings.get('memory', {}).get('short_term_messages', 30):]
        
        data = {
            "model": self.model,
            "messages": recent_messages,
            "stream": False,
            "options": {
                "num_predict": self.settings.get('model', {}).get('max_tokens', 500),
                "temperature": self.settings.get('model', {}).get('temperature', 0.7),
                "top_p": self.settings.get('model', {}).get('top_p', 0.9),
                "repeat_penalty": self.settings.get('model', {}).get('repeat_penalty', 1.1)
            }
        }
        
        try:
            response = requests.post(self.base_url + "/chat", json=data, timeout=120)
            
            if response.status_code == 200:
                result = response.json()
                assistant_message = result['message']['content']
                
                # –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –û–¢–í–ï–¢ –ü–û–õ–ù–´–ô
                if not assistant_message.endswith(('.', '!', '?')) and len(assistant_message) > 50:
                    assistant_message += "."
                
                self.conversation_history.append({
                    "role": "assistant", 
                    "content": assistant_message
                })
                
                # –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –í –ü–ê–ú–Ø–¢–¨
                self.save_to_long_term_memory({"role": "assistant", "content": assistant_message})
                
                # –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò
                self.save_long_term_memory()
                
                self.logger.info(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç: {assistant_message[:50]}...")
                return assistant_message
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ API Ollama: {response.status_code}")
                return "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–≤—è–∑–∏."
                
        except requests.exceptions.Timeout:
            self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama")
            return "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏. –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."
        except requests.exceptions.ConnectionError:
            self.logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama")
            return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ Ollama."
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏. –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."
    
    def get_conversation_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞"""
        important_memories = len([m for m in self.long_term_memory if m.get('importance', 0) >= 3])
        
        return {
            'total_messages': len(self.conversation_history),
            'long_term_memory_entries': len(self.long_term_memory),
            'important_memories': important_memories,
            'memory_usage': f"{len(self.conversation_history)}/25 —Å–æ–æ–±—â–µ–Ω–∏–π",
            'system_messages': len([m for m in self.conversation_history if m['role'] == 'system'])
        }

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    manager = KyaraCharacterManager()
    
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –ù–∏–∫–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print("üîí –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ê–ö–¢–ò–í–ù–´")
    print("üíæ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: –ê–ö–¢–ò–í–ù–ê")
    print("üö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –ê–ö–¢–ò–í–ù–û")
    print("\n–ö–æ–º–∞–Ω–¥—ã –ø–∞–º—è—Ç–∏:")
    print("  '–∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ ...' - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å")
    print("  '–ø–æ–∫–∞–∂–∏ –ø–∞–º—è—Ç—å' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    print("  '–æ—á–∏—Å—Ç–∏ –ø–∞–º—è—Ç—å' - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    print("  '—Å—Ç–∞—Ç–∞' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n")
    
    while True:
        try:
            user_input = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit']:
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                manager.save_long_term_memory()
                break
                
            elif user_input.lower() == '—Å—Ç–∞—Ç–∞':
                stats = manager.get_conversation_stats()
                print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
                print(f"üß† –ü–∞–º—è—Ç—å: {stats['long_term_memory_entries']} –∑–∞–ø–∏—Å–µ–π")
                print(f"‚≠ê –í–∞–∂–Ω—ã—Ö: {stats['important_memories']}")
                print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats['memory_usage']}")
                continue
            
            response = manager.chat(user_input)
            print(f"–ù–∏–∫–æ–ª—å: {response}\n")
            
        except KeyboardInterrupt:
            print("\nüö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            manager.save_long_term_memory()
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
