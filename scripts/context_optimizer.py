#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import re
import json
from datetime import datetime, timedelta
from pathlib import Path
import logging

class ContextOptimizer:
    def __init__(self, data_path="data"):
        self.data_path = Path(data_path) if data_path else None
        self.logger = logging.getLogger("NicoleContext")
        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
    def compress_conversation(self, conversation_history, max_tokens=8000):
        """–°–∂–∏–º–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã"""
        try:
            if len(conversation_history) <= 10:
                self.logger.debug("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–∂–∞—Ç–∏—è (<10 —Å–æ–æ–±—â–µ–Ω–∏–π)")
                return conversation_history
            
            original_count = len(conversation_history)
            compressed = []
            
            # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if conversation_history and conversation_history[0]['role'] == 'system':
                compressed.append(conversation_history[0])
                self.logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –Ω–∞—á–∞–ª–∞
            important_early = self._extract_important_early_messages(conversation_history)
            compressed.extend(important_early)
            if important_early:
                self.logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(important_early)} –≤–∞–∂–Ω—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            recent_count = min(8, len(conversation_history) - len(compressed))
            recent_messages = conversation_history[-recent_count:]
            compressed.extend(recent_messages)
            self.logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(recent_messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            final_count = len(compressed)
            compression_ratio = (original_count - final_count) / original_count * 100
            self.logger.info(f"üîß –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∂–∞—Ç: {original_count} ‚Üí {final_count} —Å–æ–æ–±—â–µ–Ω–∏–π ({compression_ratio:.1f}% —Å–∂–∞—Ç–∏—è)")
            
            return compressed
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            safe_slice = conversation_history[-15:] if len(conversation_history) > 15 else conversation_history
            self.logger.warning(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ä–µ–∑: {len(safe_slice)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return safe_slice
    
    def _extract_important_early_messages(self, conversation):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
        important_messages = []
        
        try:
            # –ò—â–µ–º –≤–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã
            keywords = ['–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è', '–∫—Ç–æ —Ç—ã', '–∏–º—è', '–∑–≤–∞—Ç—å', '—Ä–æ–ª—å', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏']
            
            for i, message in enumerate(conversation[1:15]):  # –ü–µ—Ä–≤—ã–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ
                if message['role'] == 'user':
                    content_lower = message['content'].lower()
                    if any(keyword in content_lower for keyword in keywords):
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
                        important_messages.append(message)
                        if i+2 < len(conversation) and conversation[i+2]['role'] == 'assistant':
                            important_messages.append(conversation[i+2])
                        self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {content_lower[:30]}...")
            
            self.logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(important_messages)} –≤–∞–∂–Ω—ã—Ö —Ä–∞–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return important_messages[:4]  # –ù–µ –±–æ–ª–µ–µ 4 –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def calculate_importance(self, message):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            content = message['content'].lower()
            importance_score = 0
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ –≤–∞–∂–Ω–æ—Å—Ç—å
            important_keywords = {
                '–∫—å—è—Ä–∞': 3, '–≥–æ—Å–ø–æ–∂–∞': 2, '—Ñ–∞–±—Ä–∏–∫–∞': 2, '—Å–Ω–µ–∂–Ω–∞—è –º–µ–∫–∞': 3,
                '–ø–∞–º—è—Ç—å': 2, '–≤—Å–ø–æ–º–Ω–∏': 2, '–∑–∞–ø–æ–º–Ω–∏': 2, '–≤–∞–∂–Ω–æ': 1,
                '–∏–º—è': 1, '–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è': 1, '—Ä–æ–ª—å': 1, '–¥–∏—Ä–µ–∫—Ç–æ—Ä': 2
            }
            
            for keyword, weight in important_keywords.items():
                if keyword in content:
                    importance_score += weight
                    self.logger.debug(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' +{weight} –∫ –≤–∞–∂–Ω–æ—Å—Ç–∏")
            
            # –í–æ–ø—Ä–æ—Å—ã –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã
            if '?' in message['content']:
                importance_score += 1
                self.logger.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å +1 –∫ –≤–∞–∂–Ω–æ—Å—Ç–∏")
            
            self.logger.debug(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å {importance_score} –¥–ª—è: {content[:30]}...")
            return importance_score
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {e}")
            return 0
    
    def should_save_to_long_term(self, message, conversation_context):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"""
        try:
            importance = self.calculate_importance(message)
            should_save = importance >= 2  # –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏
            
            if should_save:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance})")
            else:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance})")
            
            return should_save
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(level=logging.DEBUG)
    
    optimizer = ContextOptimizer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_conversation = [
        {"role": "system", "content": "–¢—ã –ù–∏–∫–æ–ª—å, —Ä–æ–±–æ—Ç-–¥–≤–æ—Ä–µ—Ü–∫–∏–π"},
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"},
        {"role": "assistant", "content": "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–æ–ª—å."},
        {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≥–æ—Å–ø–æ–∂–µ –ö—å—è—Ä–µ"},
        {"role": "assistant", "content": "–ö—å—è—Ä–∞ - –º–æ—è –≥–æ—Å–ø–æ–∂–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∞–±—Ä–∏–∫–∏."},
        # ... –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    ] * 5  # –£–º–Ω–æ–∂–∞–µ–º —á—Ç–æ–±—ã –±—ã–ª–æ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    print("üß™ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    compressed = optimizer.compress_conversation(test_conversation)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(test_conversation)} ‚Üí {len(compressed)} —Å–æ–æ–±—â–µ–Ω–∏–π")
